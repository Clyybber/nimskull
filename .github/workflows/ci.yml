name: Build and test
on:
  push:
    # Empty configuration means use default (ie. test all branches)
    branches-ignore:
      # Everything would have passed bors before going into devel
      - devel
      # Bors temporary branches
      - staging.tmp
      - trying.tmp
      - staging-squash-merge.tmp

  pull_request:
    # Only take PRs to devel
    branches:
      - devel

    # Type of events to run CI on
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

# Run every script actions in bash
defaults:
  run:
    shell: bash

jobs:
  pre_run:
    name: Provide additional context for the workflow
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.skip_result.outputs.result }}
      target_matrix: ${{ steps.matrix.outputs.result }}

    steps:
      - id: run_cond
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          # Cancel CI on outdated commits
          cancel_others: true
          # Don't skip when a duplicated run (ie. from a PR) is done.
          #
          # Only CI in upstream has docs publishing rights.
          skip_after_successful_duplicate: false
          # Do not skip on push, dispatched or cron
          do_not_skip: '["push", "workflow_dispatch", "schedule"]'

      - id: skip_result
        name: Whether to skip checks
        run: |
          if [[ '${{ steps.run_cond.outputs.should_skip }}' == true ]]; then
            echo "::set-output name=result::true"
          elif [[ '${{ github.event.pull_request.draft }}' == true ]]; then
            echo "Pull request is in draft state, skipping"
            echo "::set-output name=result::true"
          else
            echo "::set-output name=result::false"
          fi

      - id: matrix
        name: Obtain build target matrix
        run: |
          # This matrix will be shared by the jobs following it.
          #
          # The schema is:
          # [
          #   {
          #     name: String,  ## The name of the target being tested
          #     runner: String ## The runner to use of this target
          #     publish_docs?: Bool ## Whether to publish documentation created by this target
          #   }
          # ]
          cat << "EOF" > matrix.json
          [
            {
              "name": "Linux",
              "runner": "ubuntu-20.04",
              "publish_docs": true
            },
            {
              "name": "macOS",
              "runner": "macos-10.15"
            }
          ]
          EOF

          # Use jq to compact the matrix into one line to be used as the result
          echo "::set-output name=result::$(jq -c . matrix.json)"

  bootstrap:
    needs: [pre_run]
    if: needs.pre_run.outputs.skip != 'true'

    strategy:
      fail-fast: false

      matrix:
        target: ${{ fromJson(needs.pre_run.outputs.target_matrix) }}

    name: Bootstrap the compiler (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.runner }}

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - name: Build compiler
        run: ./koch.py boot -d:release

      - name: Upload compiler to artifacts
        uses: ./.github/actions/upload-compiler

  test:
    needs: [pre_run, bootstrap]

    strategy:
      fail-fast: false

      matrix:
        target: ${{ fromJson(needs.pre_run.outputs.target_matrix) }}
        # This controls the testament "batch" feature.
        #
        # If any additional batches are added, increment `total_batch` as well.
        #
        # This feature allow us to parallelize testing.
        batch: [0, 1]
        # This tells testament how many batches are used. Have to be placed in
        # an array due to how Github Actions process matrices.
        total_batch: [2]

    name: 'Test the compiler and stdlib (${{ matrix.target.name }}, batch #${{ matrix.batch }})'
    runs-on: ${{ matrix.target.runner }}

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - uses: ./.github/actions/download-compiler

      - name: Install NodeJS
        uses: actions/setup-node@v2.5.1
        with:
          node-version: '16'

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          deps=(
            # Needed by boehm gc tests
            libgc-dev

            # Required by Nim in Action tests
            libsdl1.2-dev
            libsfml-dev

            # Required by ARC/ORC memory leak tests (only enabled on linux x64)
            libc6-dbg
            valgrind
          )

          sudo apt-get update
          sudo apt-get install "${deps[@]}"

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          deps=(
            # Needed by boehm gc tests
            bdw-gc

            # Required by Nim in Action tests
            sdl
            sfml
          )

          brew update
          brew install "${deps[@]}"

      - name: Run tester
        run: ./koch.py test --batch:'${{ matrix.batch }}_${{ matrix.total_batch }}' all

      - name: Print all test errors
        if: failure()
        run: bin/nim r tools/ci_testresults

  orc:
    needs: [pre_run, bootstrap]

    strategy:
      fail-fast: false

      matrix:
        target: ${{ fromJson(needs.pre_run.outputs.target_matrix) }}

    name: Test build compiler with ORC (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.runner }}

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - uses: ./.github/actions/download-compiler

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - name: Test ORC bootstrap
        run: ./koch.py --nim:bin/nim boot -d:release --gc:orc

  tooling:
    needs: [pre_run, bootstrap]

    strategy:
      fail-fast: false

      matrix:
        target: ${{ fromJson(needs.pre_run.outputs.target_matrix) }}

    name: Build and test tooling (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.runner }}

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - uses: ./.github/actions/download-compiler

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - name: Build tooling
        run: ./koch.py tools -d:release

      - name: Test tooling
        run: ./koch.py testTools

  doc:
    needs: [pre_run, bootstrap]

    strategy:
      fail-fast: false

      matrix:
        target: ${{ fromJson(needs.pre_run.outputs.target_matrix) }}

    name: Build HTML documentation (${{ matrix.target.name }})
    runs-on: ${{ matrix.target.runner }}

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - uses: ./.github/actions/download-compiler

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - name: Build docs
        run: |
          ./koch.py doc \
            --git.url:'https://github.com/${{ github.repository }}' \
            --git.commit:'${{ github.sha }}' \
            --git.devel:devel

          # Remove leftover nimcache
          rm -rf doc/html/nimcache

      - name: Publish to artifacts
        if: matrix.target.publish_docs
        uses: actions/upload-artifact@v2.3.1
        with:
          # If this name is updated, tweak publisher.yml
          name: Generated docs
          path: doc/html/
          if-no-files-found: error

  passed:
    name: All check passed
    needs: [bootstrap, test, tooling, doc, orc]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Raise failure
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "::error::There are failing required jobs"
          exit 1

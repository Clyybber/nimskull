discard """
  description: '''
    Test to make sure that both closure inference and lambda-lifting happen
    late enough for typed template/macro parameters and 'gensym's to be
    analysed too
  '''
  targets: "c vm js"
"""

import std/macros

template validate(prc, val: untyped) =
  ## Used by all test cases to check whether the expectations hold
  doAssert typeof(a) is "closure" # did inference work?
  a() # did lifting work?
  doAssert val == 2

block template_params:
  # test that closure inference and lambda-lifting work when the symbol comes
  # from a typed template argument
  proc test() =
    template templ(val: typed) =
      proc a() =
        doAssert val == 1
        val = 2

      validate(a, val)

    var x = 1
    templ(x)

  test()

block macro_params:
  # test that closure inference and lambda-lifting work when the symbol comes
  # from a typed macro argument
  proc test() =
    macro m(val: typed) =
      result = quote do:
        proc a() =
          doAssert `val` == 1
          `val` = 2

        validate(a, `val`)

    var x = 1
    m(x)

  test()

block template_gensym:
  # test that closure inference and lambda-lifting work when the symbol is
  # resolved during the first phase of template body symbol lookup (i.e. is
  # a 'gensym')
  proc test() =
    template templ() =
      var val = 1 # a gensym'ed symbol

      template nested() =
        proc a() =
          doAssert val == 1
          val = 2

        validate(a, val)

      nested()
    templ()

  test()

block macro_gensym:
  # test that closure inference and lamba-lifting work when the symbol is
  # generated by a macro
  proc test() =
    macro m() =
      let s = genSym(nskVar, "a")
      result = quote do:
        var `s` = 1
        proc a() =
          doAssert `s` == 1
          `s` = 2

        validate(a, `s`)

    m()

  test()
## This module provides type definitions for all structured report entries
## that compiler can provide.
##
## Note that this module specifically does not import anything else from
## the compiler - by design it is supposed to be available in every other
## module (because almost any phase of the compiler can generate reports
## one way or another). By design report should contain as much information
## as possible and *never* be used for any conditional logic in the
## compiler - it is a final form of the output that can only be printed to
## the output (either via user-provided report hook implementation, or
## using one of the built-in ones)
##
## Not using compiler-specific types also allows this report to be easily
## reused by external tooling - custom error pretty-printers, test runners
## and so on.

import std/[options]

type
  ReportKind* = enum
    ## Kinds of the toplevel reports. Only dispatches on report topics,
    ## such as sem, parse, macro (for `echo` in compile-time code) and so
    ## on. Subdivision is based on different phases of the compiler
    ## operation, and not on report's state itself, as those are completely
    ## orthogonal to each other (lexer might provide errors and hints,
    ## parser can provide errors, hints and warnings)

    repParser
    repLexer ## Report generated by lexer - bad tokens, lines that are too
             ## long etc.

    repSem ## Report produced directly by semantic analysis - compilation
           ## errors, warnings and hints

    repCmd ## Report related to execution of the external command - start
           ## of the command, execution failure, succes and so on.

    repDebug ## Side channel for the compiler debug report. Sem expansion
             ## traces and other helper messages designed specifically to
             ## aid development of the compiler


type
  ReportLineRange* = object
    ## Report location expressed as a span of lines in the file
    file*: string
    startLine*, endline*: int
    startColumn*, endColumn*: int

  ReportLinePoint* = object
    ## Location expressed in terms of a single point in the file
    file*: string
    line*: int
    column*: int

  ReportLineInfo* = object
    case isRange*: bool
      of true:
        lrange*: ReportLineRange

      of false:
        rpoint*: ReportLinePoint

  ReportSeverity* = enum
    rsevDebug ## Internal compiler debug information

    rsevHint ## User-targeted hint
    rsevWarning ## User-targeted warnings
    rsevError ## User-targeted error

    rsevTrace ## Additional information about compiler actions - external
              ## commands mostly.


  ReportBase* = object of RootObj
    location*: Option[ReportLineInfo] ## Location associated with report.
    ## Some reports do not have any locations associated with them (most
    ## (but not all, due to `gorge`) of the external command executions,
    ## sem tracing etc). Some reports might have additional associated
    ## location information (view type sealing reasons) - those are handled
    ## on the per-report-kind basis.

    reportInst*: ReportLineInfo ## Information about instantiation location
    ## of the reports - present for all reports in order to track their
    ## origins.

type
  LexerReportKind* = enum
    rlexTest

  LexerReport* = object of ReportBase

type
  ParserReportKind* = enum
    rparTest

  ParserReport* = object of ReportBase

type
  SemReportKind* = enum
    rsemTest


  SemReportEntryKind* = enum
    srekProc
    srekTemplate
    srekMacro
    srekMethod
    srekConverter

    srekEnum
    srekObject
    srekAlias
    srekTypeclass

  SemReportEntry* = object
    ## Entry mentioned in the sem report - type or procedure definition,
    ## macros, template or any similar construct. Used in reports like
    ## overload failures, "template/generic instantiation of" and such, to
    ## store information about entry referred to.
    declaredIn*: ReportLineInfo ## Location of the entry declaration
    kind*: SemReportEntryKind

  SemRef* = object

  SemContextKind* = enum
    sckInstantiationOf
    sckInstantiationFrom

  SemContext* = object
    case kind*: SemContextKind
      of sckInstantiationOf:
        entry*: SemReportEntry

      of sckInstantiationFrom:
        location*:

  SemReport* = object of ReportBase

type
  CmdReportKind* = enum
    rcmdTest

  CmdReport* = object of ReportBase

type
  DebugReportKind* = enum
    rdbgTest

  DebugReport = object of ReportBase

type
  Report* = object
    ## Toplevel wrapper type for the compiler report
    case kind*: ReportKind
      of repLexer:
        lexReport*: LexerReport

      of repParser:
        parseReport*: ParserReport

      of repSem:
        semReport*: SemReport

      of repCmd:
        cmdReport*: CmdReport

      of repDebug:
        debugReport*: DebugReport
